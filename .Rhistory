class = "smhi_invalid_station"
)
expect_error(
get_smhi_period("159880", "invalid_param"),
class = "smhi_invalid_parameter"
)
})
test_that("get_smhi_data() lanza error si el periodo no es válido", {
expect_error(
get_smhi_data("159880", "1", "not-a-period"),
class = "smhi_invalid_period"
)
})
test_that("get_smhi_data() lanza error si el parámetro no está disponible para la estación", {
expect_error(
get_smhi_data("159880", "9999", "latest-day"),
class = "smhi_unavailable_paramter"
)
})
test_that("get_smhi_data() lanza error si la combinación estación/parámetro no tiene datos para ese periodo", {
# Este test depende de que efectivamente no haya datos para esa combinación.
# Puedes usar una combinación que sepas que no tiene datos para ese periodo.
expect_error(
get_smhi_data("159880", "1", "corrected-archive"),
class = "smhi_unavailable_data"
)
})
test_that("get_smhi_data2() lanza errores análogos a get_smhi_data()", {
fake_tbl <- tibble::tibble(
station_id = "invalid_station",
parameter_id = "1"
)
expect_error(
get_smhi_data2(fake_tbl, "latest-day"),
class = "smhi_invalid_station"
)
})
test_that("get_smhi_closest() lanza warning si no hay estaciones en el radio dado", {
# Aquí asumimos que un punto alejado no devolverá ninguna estación
pt <- sf::st_sf(geometry = sf::st_sfc(sf::st_point(c(0, 90)), crs = 4326))
expect_warning(
get_smhi_closest(pt, parameter_key = "1", period_name = "latest-day", max_radius = 1),
class = "smhi_no_stations"
)
})
test_that("check_valid_period() lanza error con periodos inválidos", {
expect_error(
check_valid_period("bad-period"),
class = "smhi_invalid_period"
)
})
################
test_that("get_smhi_data() lanza error si el parámetro no está disponible para la estación", {
expect_error(
get_smhi_data("159880", "9999", "latest-day"),
class = "smhi_unavailable_paramter"
)
})
test_that("get_smhi_station() throws an error for an invalid parameter", {
expect_error(
get_smhi_station("9999"),
class = "smhi_invalid_parameter"
)
})
test_that("get_smhi_period() throws errors for invalid station or parameter", {
expect_error(
get_smhi_period("invalid_station", "1"),
class = "smhi_invalid_station"
)
expect_error(
get_smhi_period("159880", "invalid_param"),
class = "smhi_invalid_parameter"
)
})
test_that("get_smhi_data() throws an error for invalid period", {
expect_error(
get_smhi_data("159880", "1", "not-a-period"),
class = "smhi_invalid_period"
)
})
test_that("get_smhi_data() throws an error when parameter is not available for station", {
expect_error(
get_smhi_data("159880", "9999", "latest-day"),
class = "smhi_unavailable_paramter"
)
})
test_that("get_smhi_data() throws an error when no data is available for station/parameter/period", {
# Use a known combination that returns no data
expect_error(
get_smhi_data("159880", "1", "corrected-archive"),
class = "smhi_unavailable_data"
)
})
test_that("get_smhi_data2() throws errors like get_smhi_data()", {
fake_tbl <- tibble::tibble(
station_id = "invalid_station",
parameter_id = "1"
)
expect_error(
get_smhi_data2(fake_tbl, "latest-day"),
class = "smhi_invalid_station"
)
})
test_that("get_smhi_closest() warns when no stations are found within the radius", {
pt <- sf::st_sf(geometry = sf::st_sfc(sf::st_point(c(0, 90)), crs = 4326))
expect_warning(
get_smhi_closest(pt, parameter_key = "1", period_name = "latest-day", max_radius = 1),
class = "smhi_no_stations"
)
})
test_that("check_valid_period() throws an error for an invalid period", {
expect_error(
check_valid_period("bad-period"),
class = "smhi_invalid_period"
)
})
#------------------------------------------ NOOOOO
test_that("get_smhi_data() throws an error when parameter is not available for station", {
expect_error(
get_smhi_data("159880", "9999", "latest-day"),
class = "smhi_unavailable_paramter"
)
})
#------------------------------------------ NOOOOO
test_that("get_smhi_data() throws an error for an invalid parameter (not existing)", {
expect_error(
get_smhi_data("159880", "9999", "latest-day"),
class = "smhi_invalid_parameter"
)
})
#------------------------------------------ NOOOOO
test_that("get_smhi_data() throws an error when no data is available for station/parameter/period", {
# Use a known combination that returns no data
expect_error(
get_smhi_data("159880", "1", "corrected-archive"),
class = "smhi_unavailable_data"
)
})
#------------------------------------------ NOOOOO
test_that("get_smhi_closest() warns when no stations are found within the radius", {
pt <- sf::st_sf(geometry = sf::st_sfc(sf::st_point(c(0, 90)), crs = 4326))
expect_warning(
get_smhi_closest(pt, parameter_key = "1", period_name = "latest-day", max_radius = 1),
class = "smhi_no_stations"
)
})
fake_tbl
get_smhi_data2 <- function(pairs_tbl, period_name, verbose = TRUE) {
check_valid_period(period_name)
if (nrow(pairs_tbl) == 0) {
warn("No station/parameter pairs were provided.", class = "smhi_no_stations")
return(NULL)
}
purrr::walk2(pairs_tbl$station_id, pairs_tbl$parameter_id, ~ {
check_valid_station(.x)
check_valid_parameter(.y)
check_available_parameter(.x, .y)
available_periods <- get_smhi_period(.x, .y)
if (!(period_name %in% available_periods)) {
rlang::abort(
message = glue::glue("No data for station '{.x}', parameter '{.y}' and period '{period_name}'."),
class = "smhi_unavailable_data"
)
}
})
results <-
pairs_tbl %>%
dplyr::mutate(data = purrr::map2(station_id, parameter_id, ~ {
if (verbose) message(glue::glue("- Downloading data for station {.x}, parameter {.y}..."))
get_smhi_data(.x, .y, period_name, verbose = FALSE) %>%
pivot_longer(cols = -c("station_id", "date", "quality")) %>%
dplyr::select(-station_id, -name)
})) %>%
unnest(data) %>%
dplyr::mutate(parameter_id = paste0("par_", parameter_id)) %>%
tidyr::pivot_wider(names_from = "parameter_id", values_from = "value")
return(results)
}
#------------------------------------------ NOOOOO
test_that("get_smhi_closest() warns when no stations are found within the radius", {
pt <- sf::st_sf(geometry = sf::st_sfc(sf::st_point(c(0, 90)), crs = 4326))
expect_warning(
get_smhi_closest(pt, parameter_key = "1", period_name = "latest-day", max_radius = 1),
class = "smhi_no_stations"
)
})
get_smhi_data2 <- function(pairs_tbl, period_name, verbose = TRUE) {
check_valid_period(period_name)
if (nrow(pairs_tbl) == 0) {
rlang::warn("No station/parameter pairs were provided.", class = "smhi_no_stations")
return(NULL)
}
purrr::walk2(pairs_tbl$station_id, pairs_tbl$parameter_id, ~ {
check_valid_station(.x)
check_valid_parameter(.y)
check_available_parameter(.x, .y)
available_periods <- get_smhi_period(.x, .y)
if (!(period_name %in% available_periods)) {
rlang::abort(
message = glue::glue("No data for station '{.x}', parameter '{.y}' and period '{period_name}'."),
class = "smhi_unavailable_data"
)
}
})
results <-
pairs_tbl %>%
dplyr::mutate(data = purrr::map2(station_id, parameter_id, ~ {
if (verbose) message(glue::glue("- Downloading data for station {.x}, parameter {.y}..."))
get_smhi_data(.x, .y, period_name, verbose = FALSE) %>%
pivot_longer(cols = -c("station_id", "date", "quality")) %>%
dplyr::select(-station_id, -name)
})) %>%
unnest(data) %>%
dplyr::mutate(parameter_id = paste0("par_", parameter_id)) %>%
tidyr::pivot_wider(names_from = "parameter_id", values_from = "value")
return(results)
}
#------------------------------------------ NOOOOO
test_that("get_smhi_closest() warns when no stations are found within the radius", {
pt <- sf::st_sf(geometry = sf::st_sfc(sf::st_point(c(0, 90)), crs = 4326))
expect_warning(
get_smhi_closest(pt, parameter_key = "1", period_name = "latest-day", max_radius = 1),
class = "smhi_no_stations"
)
})
get_smhi_closest <- function(points, parameter_key, period_name, verbose = TRUE,
n = 1, max_radius = 100) {
check_valid_period(period_name)
for (par in parameter_key) {
check_valid_parameter(par)
}
results <- purrr::map_dfr(1:nrow(points), function(i) {
point <- points[i, ]
result <- get_closest_stations(point, parameter_key, period_name, max_radius, n)
return(result)
})
results <-
results %>%
get_smhi_data2(period_name = period_name)
if (is.null(data)) return(NULL)
result <-
result %>%
dplyr::mutate(quality = dplyr::case_when(quality == "" ~ NA_character_,
TRUE ~ quality)) %>%
dplyr::select(-geometry)
return(results)
}
#------------------------------------------ NOOOOO
test_that("get_smhi_closest() warns when no stations are found within the radius", {
pt <- sf::st_sf(geometry = sf::st_sfc(sf::st_point(c(0, 90)), crs = 4326))
expect_warning(
get_smhi_closest(pt, parameter_key = "1", period_name = "latest-day", max_radius = 1),
class = "smhi_no_stations"
)
})
get_smhi_closest <- function(points, parameter_key, period_name, verbose = TRUE,
n = 1, max_radius = 100) {
check_valid_period(period_name)
for (par in parameter_key) {
check_valid_parameter(par)
}
results <- purrr::map_dfr(1:nrow(points), function(i) {
point <- points[i, ]
result <- get_closest_stations(point, parameter_key, period_name, max_radius, n)
return(result)
})
results <-
results %>%
get_smhi_data2(period_name = period_name)
if (is.null(results)) return(NULL)
result <-
result %>%
dplyr::mutate(quality = dplyr::case_when(quality == "" ~ NA_character_,
TRUE ~ quality)) %>%
dplyr::select(-geometry)
return(results)
}
#------------------------------------------ NOOOOO
test_that("get_smhi_closest() warns when no stations are found within the radius", {
pt <- sf::st_sf(geometry = sf::st_sfc(sf::st_point(c(0, 90)), crs = 4326))
expect_warning(
get_smhi_closest(pt, parameter_key = "1", period_name = "latest-day", max_radius = 1),
class = "smhi_no_stations"
)
})
#------------------------------------------ NOOOOO
test_that("get_smhi_data() throws an error when no data is available for station/parameter/period", {
# Use a known combination that returns no data
expect_error(
get_smhi_data("159880", "1", "corrected-archive"),
class = "smhi_unavailable_data"
)
})
#------------------------------------------ NOOOOO
test_that("get_smhi_data() throws an error when no data is available for station/parameter/period", {
expect_error(
get_smhi_data("159880", "1", "corrected-archive"),
class = "smhi_unavailable_data"
)
})
get_smhi_data <- function(station_key, parameter_key, period_name, verbose = T) {
check_valid_period(period_name)
for (station in station_key) {
check_valid_station(station)
for (par in parameter_key) {
check_valid_parameter(par)
check_available_parameter(station, par)
available_periods <- get_smhi_period(station, par)
if (!(period_name %in% available_periods)) {
rlang::abort(
message = glue::glue("No data for station '{station}', parameter '{par}' and period '{period_name}'."),
class = "smhi_unavailable_data"
)
}
}
}
all_data <- list()
for(station in station_key) {
if (verbose) message(glue::glue("- Downloading '{station}' station info ({match(station,
station_key)}/{length(station_key)}): "), appendLF = F)
for(par in parameter_key) {
url <- paste0(.metObsAPI, "/version/latest/parameter/",par,
"/station/",station,"/period/",period_name,"/data.csv")
data <- readLines(url, warn = FALSE, encoding = "UTF-8")
if (length(data) == 0) {
rlang::abort(
message = glue::glue("No data available for station '{station}', parameter '{par}', and period '{period_name}'."),
class = "smhi_unavailable_data"
)
}
var <- data[5] %>% str_extract("^[^;]*")
data_split <- strsplit(data, ";")
cr <- lapply(data_split, function(x) any(str_detect(x, "Datum") == T)) %>%
unlist %>%
which
names_columns <- data_split[cr] %>% unlist()
position <- which(str_detect(names_columns, "Kvalitet"))
meteo_data <- data_split[c((cr+1):length(data_split))]
meteo_data <- meteo_data[1:max(which(lapply(meteo_data,
function(x) x[1] %>% nchar) %>%
unlist != 0))]
meteo_data <- as.data.frame(do.call(rbind, lapply(meteo_data, function(x) {x[1:position]})),
stringsAsFactors = FALSE)
names(meteo_data) <- names_columns[1:position]
if("Representativt dygn" %in% names_columns){
meteo_data <-
meteo_data %>%
dplyr::mutate(station_id = station) %>%
dplyr::mutate(date =`Representativt dygn`) %>%
dplyr::mutate(date = lubridate::parse_date_time(paste(date, "18:00:00"), orders = "ymd HMS")) %>%
dplyr::mutate(parameter_value = as.numeric(.[[var]])) %>%
dplyr::mutate(parameter_id = paste0("par_", par)) %>%
dplyr::select(station_id, date, parameter_value, parameter_id, quality = Kvalitet) %>%
dplyr::as_tibble()
}else{
meteo_data <-
meteo_data %>%
dplyr::mutate(station_id = station) %>%
dplyr::mutate(date = lubridate::parse_date_time(paste(Datum, `Tid (UTC)`), orders = "ymd HMS")) %>%
dplyr::mutate(parameter_value = as.numeric(.[[var]])) %>%
dplyr::mutate(parameter_id = paste0("par_", par)) %>%
dplyr::select(station_id, date, parameter_value, parameter_id, quality = Kvalitet) %>%
dplyr::as_tibble()
}
all_data[[paste0(station, par, sep = "_")]] <- meteo_data
par_title <-
get_smhi_parameters() %>%
dplyr::filter(parameter_id == par) %>%
dplyr::pull(title)
if (verbose) message(glue::glue("{par} \u2713 "), appendLF = F)
}
if (verbose) message("--> Done!\n")
}
all_data <- dplyr::bind_rows(all_data)
all_data <-
all_data %>%
tidyr::pivot_wider(names_from = "parameter_id",
values_from = "parameter_value")
return(all_data)
}
#------------------------------------------ NOOOOO
test_that("get_smhi_data() throws an error when no data is available for station/parameter/period", {
# Use a known combination that returns no data
expect_error(
get_smhi_data("159880", "1", "corrected-archive"),
class = "smhi_unavailable_data"
)
})
#------------------------------------------ NOOOOO
test_that("get_smhi_data() throws an error when no data is available for station/parameter/period", {
expect_error(
get_smhi_data("159880", "1", "corrected-archive"),
class = "smhi_unavailable_data"
)
})
test_that("get_smhi_data() throws an error for invalid station ID", {
expect_error(
get_smhi_data("invalid_station", "1", "latest-day"),
"Invalid station ID"
)
})
test_that("get_smhi_data() throws an error when an invalid combination of station, parameter, and period is provided", {
expect_error(
get_smhi_data("159880", "9999", "latest-month"),
"Invalid parameter"
)
})
test_that("get_smhi_data() returns a data frame with the correct columns", {
data <- get_smhi_data("159880", "1", "latest-day")
expect_true("station_id" %in% colnames(data))
expect_true("date" %in% colnames(data))
expect_true("parameter_value" %in% colnames(data))
})
test_that("get_smhi_data() handles empty data correctly", {
data <- get_smhi_data("159880", "1", "latest-hour") # Un periodo que sepas que no tiene datos
expect_equal(nrow(data), 0)
})
test_that("get_smhi_data() runs within a reasonable time", {
expect_lte(system.time(get_smhi_data("159880", "1", "latest-day"))[3], 5) # Debe ejecutarse en menos de 5 segundos
})
test_that("get_smhi_data() returns a data frame with the correct columns", {
data <- get_smhi_data("159880", "1", "latest-day")
expect_true("station_id" %in% colnames(data))
expect_true("date" %in% colnames(data))
expect_true("parameter_value" %in% colnames(data))
})
test_that("get_smhi_data() handles empty data correctly", {
data <- get_smhi_data("159880", "1", "latest-hour") # Un periodo que sepas que no tiene datos
expect_equal(nrow(data), 0)
})
test_that("get_smhi_data() returns data with the correct structure", {
data <- get_smhi_data("159880", "1", "latest-day")
# Verifica que las columnas esperadas estén presentes
expect_true(all(c("station_id", "date", "parameter_value") %in% colnames(data)))
# Verifica que las columnas tengan los tipos esperados
expect_is(data$station_id, "character")
expect_is(data$date, "POSIXct")
expect_is(data$parameter_value, "numeric")
})
get_smhi_data("159880", "1", "latest-day")
get_smhi_data("159880", "1", "latest-day")
# Verifica que las columnas esperadas estén presentes
expect_true(all(c("station_id", "date", "parameter_value") %in% colnames(data)))
# Verifica que las columnas esperadas estén presentes
expect_true(all(c("station_id", "date", "quality", "par_1") %in% colnames(data)))
colnames(data)
data
data <- get_smhi_data("159880", "1", "latest-day")
# Verifica que las columnas esperadas estén presentes
expect_true(all(c("station_id", "date", "quality", "par_1") %in% colnames(data)))
# Verifica que las columnas tengan los tipos esperados
expect_is(data$station_id, "character")
expect_is(data$date, "POSIXct")
expect_is(data$parameter_value, "numeric")
test_that("get_smhi_data() returns data with the correct structure", {
data <- get_smhi_data("159880", "1", "latest-day")
# Verifica que las columnas esperadas estén presentes
expect_true(all(c("station_id", "date", "quality", "par_1") %in% colnames(data)))
# Verifica que las columnas tengan los tipos esperados
expect_is(data$station_id, "character")
expect_is(data$date, "POSIXct")
expect_is(data$par_1, "numeric")
})
#------------------------------------------ NOOOOO
test_that("get_smhi_data() throws an error when no data is available for station/parameter/period", {
expect_error(
get_smhi_data("159880", "1", "corrected-archive"),
class = "smhi_unavailable_data"
)
})
get_smhi_data("159880", "1", "corrected-archive")
get_smhi_data("159880", "1")
#------------------------------------------ NOOOOO
test_that("get_smhi_data() throws an error when no data is available for station/parameter/period", {
# Definir una combinación que sabemos que no tendrá datos
expect_error(
get_smhi_data("159880", "999", "latest-month"),  # Asumimos que "999" no es un parámetro disponible
class = "smhi_unavailable_data"
)
})
test_that("check_valid_period() throws an error for an invalid period", {
expect_error(
check_valid_period("bad-period"),
class = "smhi_invalid_period"
)
})
usethis::use_testthat()
usethis::use_test()
usethis::use_testthat()
#'   The tibble includes columns for station ID, date, parameter value, parameter ID, and data quality.
#'
#' @export
#'
#' @examples
#' \dontrun{
#' # Get the latest hour temperature data for station 22051
#' get_smhi_data(station_key = "22051", parameter_key = "1", period_name = "latest-hour")
#' }
#'
get_smhi_data(station_key = "22051", parameter_key = "1", period_name = "latest-month")
#'   The tibble includes columns for station ID, date, parameter value, parameter ID, and data quality.
#'
#' @export
#'
#' @examples
#' \dontrun{
#' # Get the latest hour temperature data for station 22051
#' get_smhi_data(station_key = "22051", parameter_key = "1", period_name = "latest-hour")
#' }
#'
get_smhi_data(station_key = "22051", parameter_key = "1", period_name = "latest-day")
devtools::document()
